install.packages("tidyverse")
install.packages("renv")
renv::init()
renv::status
renv::status()
install.packages("rmarkdown")
renv::status()
renv::snapshot()
renv::status()
?renv::status()
install.packages("rmarkdown")
installed.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
renv::deactivate()
library(rmarkdown)
renv::activate()
renv::status()
install.packages("rmarkdown")
renv::clean()
install.packages("rmarkdown")
library(rmarkdown)
renv::settings$use.cache(FALSE)
install.packages("rmarkdown")
renv::install("rmarkdown")
renv::cache$clear()
renv::deactivate()
renv::init()
renv::install("tidyverse")
#| echo: false
#| message: false
#| warning: false
#| cache: true
#| results: markup
library(tidyverse)
install.packages("rlang")
library(tidyverse)
library(dplyr)
renv::install("rlang")
library(tidyverse)
renv::deactivate()
library(tidyverse)
install.packages("renv")
install.packages("renv")
renv::init()
install.packages("tidyverse")
library(tidyverse)
data.clean <- read_csv("data/DataCleaningR.csv")
data.clean <- read_csv("data/DataCleaningR.csv")
data.filter <- data.clean %>%
drop_na()
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear))
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF")
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") %>%
gsub("LogisticRegression", "LogReg", ClassificationMethod)
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") #%>%
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") %>%
gsub("LogisticRegression", "LogReg", ClassificationMethod)
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") %>%
mutate(ClassificationMethod = str_replace_all( "LogisticRegression", "LogReg"))
?str_replace_all
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") %>%
mutate(ClassificationMethod = str_replace_all(pattern = "LogisticRegression", replacement = "LogReg"))
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") %>%
mutate(ClassificationMethod = str_replace_all(string = "LogisticRegression", replacement = "LogReg"))
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") %>%
mutate(ClassificationMethod = str_replace_all(string = "LogisticRegression", pattern = "LogisticRegression", replacement = "LogReg"))
data.clean <- read_csv("data/DataCleaningR.csv")
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") %>%
mutate(ClassificationMethod = str_replace_all(ClassificationMethod, pattern = "LogisticRegression", replacement = "LogReg"))
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") %>%
mutate(ClassificationMethod = str_replace_all(ClassificationMethod, pattern = "LogisticRegression", replacement = "LogReg")) %>%
mutate(ClassificationMethod = factor(ClassificationMethod, levels = c("LDA","QDA","MDA","FDA","LogReg","Tree","RF")))
data.filter <- data.clean %>%
drop_na() %>%
mutate(FilterMinAppear_F = factor(FilterMinAppear)) %>%
rename(Sensitivity = Recall) %>%
filter(EmbeddingMethod != "BagOfWords", EmbeddingMethod != "TF-IDF") %>%
mutate(ClassificationMethod = str_replace_all(ClassificationMethod, pattern = "LogisticRegression", replacement = "LogReg")) %>%
mutate(ClassificationMethod = factor(ClassificationMethod, levels = c("LDA","QDA","MDA","FDA","LogReg","Tree","RF")), EmbeddingMethod = factor(EmbeddingMethod, levels = c("CBoW100","CBoW200","CBoW300","CBoW768","SG100","SG200","SG300","SG768","GloVe100","GloVe200","GloVe300","GloVe768","BERT","PCA")))
colrs.emb <- c("#12694f","#188c69","#21c090","#3fdeaf", "#645fab","#7570b3","#9794c7","#bebcdc","#b65002","#d95f02","#fd750d","#fd8c35","#e7298a","#66a61e")
colrs.class <- c("#2a618d","#3881bc","#72a8d5","#91bbde","#e41a1c","#4daf4a","#327330")
shap.emb <- c(2, 6, 14, 17, 1, 10, 13, 16,3, 5, 0, 7, 12, 15)
shap.class <- c(15, 0, 7, 12, 1, 2, 6)
lt <- c(1,2,3,4,5,6,1,2,3,4,5,6,1,2)
ltc <- c(1,2,3,4,5,6,1)
#| echo: false
#| message: false
#| warning: false
#| tidy: true
#| cache: true
#| label: accuracyCES
#| fig-cap: (ref:accuracyCES)
#| fig-align: center
CES <- data.filter %>% group_by(ClassificationMethod,EmbeddingMethod,FilterStopwords) %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy)
CES.no <- CES %>% subset(FilterStopwords == "No")
CES.yes <- CES %>% subset(FilterStopwords == "Yes")
CES.no$CES.acc.yes <- CES.yes$Accuracy
CES.new <- CES.no %>% summarize(CES.diff = Accuracy - CES.acc.yes)
CES.new %>%
ggplot(aes(x = ClassificationMethod, y = CES.diff, fill = ClassificationMethod)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~EmbeddingMethod,ncol = 4)+
geom_hline(yintercept = 0, linetype = 'dashed', linewidth =1)+
scale_fill_manual(values = colrs.class)+
xlab("Classification Method") +
ylab("Accuracy Rate")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),legend.position = "none")
#| echo: false
#| message: false
#| warning: false
#| tidy: true
#| cache: true
#| label: accuracyCES
#| fig-cap: '(ref:accuracyCES)'
#| fig-align: center
CES <- data.filter %>% group_by(ClassificationMethod,EmbeddingMethod,FilterStopwords) %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy)
CES.no <- CES %>% subset(FilterStopwords == "No")
CES.yes <- CES %>% subset(FilterStopwords == "Yes")
CES.no$CES.acc.yes <- CES.yes$Accuracy
CES.new <- CES.no %>% summarize(CES.diff = Accuracy - CES.acc.yes)
CES.new %>%
ggplot(aes(x = ClassificationMethod, y = CES.diff, fill = ClassificationMethod)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~EmbeddingMethod,ncol = 4)+
geom_hline(yintercept = 0, linetype = 'dashed', linewidth =1)+
scale_fill_manual(values = colrs.class)+
xlab("Classification Method") +
ylab("Accuracy Rate")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),legend.position = "none")
#| echo: false
#| message: false
#| warning: false
#| tidy: true
#| cache: true
#| label: accuracyCES
#| fig-cap: '(ref:accuracyCES)'
#| fig-align: center
CES <- data.filter %>% group_by(ClassificationMethod,EmbeddingMethod,FilterStopwords) %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy)
CES.no <- CES %>% subset(FilterStopwords == "No")
CES.yes <- CES %>% subset(FilterStopwords == "Yes")
CES.no$CES.acc.yes <- CES.yes$Accuracy
CES.new <- CES.no %>% summarize(CES.diff = Accuracy - CES.acc.yes)
CES.new %>%
ggplot(aes(x = ClassificationMethod, y = CES.diff, fill = ClassificationMethod)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~EmbeddingMethod,ncol = 4)+
geom_hline(yintercept = 0, linetype = 'dashed', linewidth =1)+
scale_fill_manual(values = colrs.class)+
xlab("Classification Method") +
ylab("Accuracy Rate")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),legend.position = "none")
#| echo: false
#| message: false
#| warning: false
#| tidy: true
#| cache: true
CES <- data.filter %>% group_by(ClassificationMethod,EmbeddingMethod,FilterStopwords) %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy)
CES.no <- CES %>% subset(FilterStopwords == "No")
CES.yes <- CES %>% subset(FilterStopwords == "Yes")
CES.no$CES.acc.yes <- CES.yes$Accuracy
CES.new <- CES.no %>% summarize(CES.diff = Accuracy - CES.acc.yes)
CES.new %>%
ggplot(aes(x = ClassificationMethod, y = CES.diff, fill = ClassificationMethod)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~EmbeddingMethod,ncol = 4)+
geom_hline(yintercept = 0, linetype = 'dashed', linewidth =1)+
scale_fill_manual(values = colrs.class)+
xlab("Classification Method") +
ylab("Accuracy Rate")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),legend.position = "none")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
ggtitle("MTCars MPG vs HP")
CES.new %>%
ggplot(aes(x = ClassificationMethod, y = CES.diff, fill = ClassificationMethod)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~EmbeddingMethod,ncol = 4)+
geom_hline(yintercept = 0, linetype = 'dashed', linewidth =1)+
scale_fill_manual(values = colrs.class)+
xlab("Classification Method") +
ylab("Accuracy Rate")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),legend.position = "none")
CES.new %>%
ggplot(aes(x = ClassificationMethod, y = CES.diff, fill = ClassificationMethod)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~EmbeddingMethod,ncol = 4)+
geom_hline(yintercept = 0, linetype = 'dashed', linewidth =1)+
scale_fill_manual(values = colrs.class)+
xlab("Classification Method") +
ylab("Accuracy Rate")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),legend.position = "none")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
ggtitle("MTCars MPG vs HP")
CES.new %>%
ggplot(aes(x = ClassificationMethod, y = CES.diff, fill = ClassificationMethod)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~EmbeddingMethod,ncol = 4)+
geom_hline(yintercept = 0, linetype = 'dashed', linewidth =1)+
scale_fill_manual(values = colrs.class)+
xlab("Classification Method") +
ylab("Accuracy Rate")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),legend.position = "none")
ggplot(mtcars, aes(x = mpg, y = hp)) +
geom_point() +
ggtitle("MTCars MPG vs HP")
View(CES.no)
View(CES.new)
#| echo: false
#| message: false
#| warning: false
#| tidy: true
#| cache: true
CES <- data.filter %>% group_by(ClassificationMethod,EmbeddingMethod,FilterStopwords) %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy)
CES.no <- CES %>% subset(FilterStopwords == "No")
CES.yes <- CES %>% subset(FilterStopwords == "Yes")
CES.no$CES.acc.yes <- CES.yes$Accuracy
CES.new <- CES.no %>% summarize(CES.diff = Accuracy - CES.acc.yes)
CES.new %>%
ggplot(aes(x = ClassificationMethod, y = CES.diff, fill = ClassificationMethod)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~EmbeddingMethod,ncol = 4)+
geom_hline(yintercept = 0, linetype = 'dashed', linewidth =1)+
scale_fill_manual(values = colrs.class)+
xlab("Classification Method") +
ylab("Accuracy Rate")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),legend.position = "none")
CES <- data.filter %>% group_by(ClassificationMethod,EmbeddingMethod,FilterStopwords) %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy)
CES.no <- CES %>% subset(FilterStopwords == "No")
CES.yes <- CES %>% subset(FilterStopwords == "Yes")
CES.no$CES.acc.yes <- CES.yes$Accuracy
CES.new <- CES.no %>% summarize(CES.diff = Accuracy - CES.acc.yes)
View(CES.new)
CES <- data.filter %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy) %>%
group_by(ClassificationMethod, EmbeddingMethod) %>%
pivot_wider(names_from = FilterStopwords, values_from = Accuracy) %>%
mutate(diff_acc = 'No' - 'Yes') %>%
select(ClassificationMethod, EmbeddingMethod, diff_acc)
CES <- data.filter %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy) %>%
group_by(ClassificationMethod, EmbeddingMethod) %>%
pivot_wider(names_from = FilterStopwords, values_from = Accuracy)
View(CES)
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy) %>%
#group_by(ClassificationMethod, EmbeddingMethod) %>%
pivot_wider(names_from = FilterStopwords, values_from = Accuracy) %>%
l
CES <- data.filter %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy) %>%
#group_by(ClassificationMethod, EmbeddingMethod) %>%
pivot_wider(names_from = FilterStopwords, values_from = Accuracy)
View(CES)
View(CES.new)
#| echo: false
#| message: false
#| warning: false
#| tidy: true
#| cache: true
#| fig-height: 10
#| fig-width: 10
CES <- data.filter %>% group_by(ClassificationMethod,EmbeddingMethod,FilterStopwords) %>%
select(ClassificationMethod, EmbeddingMethod, FilterStopwords, Accuracy)
CES.no <- CES %>% subset(FilterStopwords == "No")
CES.yes <- CES %>% subset(FilterStopwords == "Yes")
CES.no$CES.acc.yes <- CES.yes$Accuracy
CES.new <- CES.no %>% summarize(CES.diff = Accuracy - CES.acc.yes)
CES.new %>%
ggplot(aes(x = ClassificationMethod, y = CES.diff, fill = ClassificationMethod)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~EmbeddingMethod,ncol = 4)+
geom_hline(yintercept = 0, linetype = 'dashed', linewidth =1)+
scale_fill_manual(values = colrs.class)+
xlab("Classification Method") +
ylab("Difference in Accuracy Rates")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),legend.position = "none")
#| echo: false
#| message: false
#| warning: false
#| tidy: true
#| cache: true
#| fig-height: 10
#| fig-width: 10
data.filter %>% ggplot(aes(x = FilterStopwords, y = Accuracy, fill = FilterStopwords)) +
geom_violin(trim=FALSE, position = position_dodge(1))  +
stat_summary(fun = mean, geom = "point", shape = 16, size = 2, color = '#E2DFDF') +
stat_summary(fun = median, geom = "point", shape = 17, size = 2) +
facet_wrap(~ClassificationMethod,ncol=2)+
geom_hline(yintercept = 0.5, linetype = 'dashed', size =1)+
xlab("Filter Stop Words?") +
ylab("Accuracy Rate")+
theme_bw()+
theme(legend.position = "none")
